<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://alshedivat.github.io/news/feed.xml" rel="self" type="application/atom+xml"/><link href="https://alshedivat.github.io/news/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-29T22:00:07+00:00</updated><id>https://alshedivat.github.io/news/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Market Making SCALE</title><link href="https://alshedivat.github.io/news/blog/2025/scale-liquidity/" rel="alternate" type="text/html" title="Market Making SCALE"/><published>2025-09-26T13:37:00+00:00</published><updated>2025-09-26T13:37:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2025/scale-liquidity</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2025/scale-liquidity/"><![CDATA[<h1 id="scale-liquidity">SCALE Liquidity</h1> <p>Liquidity that enables trading SCALE is provided by both The Community &amp; The Protocol itself (aka. Protocol-owned Liquidity, or “PoL”).</p> <h2 id="market-making-strategy-of-pol">Market-making strategy of PoL</h2> <p>Traditionally, most of the liquidity resided in the SCALE/ETH vAMM (v2 or k=xy “classic”) pool, and was mostly from PoL.</p> <p>As part of the transition to the new <a href="https://scale.farm">Scale.Farm</a> branding, all PoL was restructured. v2 LP was <a href="https://basescan.org/tx/0xb7aeb556660f94bddf44d3ed0a85893ec1c765ec07c443820bd1091eff5de3df">reduced</a> on 30th August, constituting 8.78 ETH &amp; 1.48 million SCALE (35k + 35k = <code class="language-plaintext highlighter-rouge">$</code>70k). It was then re-added as a Concentrated Liquidity position on the <a href="https://eliteness.network/e3/8453-3">E3 DEX</a>, with the SCALE to be sold progressively between the prices 0.000_045 ETH to 0.000_097 ETH per SCALE, along with a Floor Order to buyback SCALE between the prices 0.000_004 ETH till 0.000_002 SCALE.</p> <p>This approach makes sure that as the protocol starts its revival phase, protocol doesnt give away SCALE tokens cheaply, while being able to sell its SCALE holding earmarked for Market Making for ETH, which will be used to bolster the treasury and build a strong backing per SCALE.</p> <p>At the same time, the buyback floor makes sure that the Treasury doesnt let the price of SCALE fall under where it was before the Scale.Farm pivot, which in USD terms is around <code class="language-plaintext highlighter-rouge">$</code>0.015 - <code class="language-plaintext highlighter-rouge">$</code>0.008, which reflects the price of SCALE in July 2025. This is huge Buy Wall of <strong><code class="language-plaintext highlighter-rouge">$</code>42</strong>,000 virtually is enough to buyback more than half of the whole liquid circulating supply of SCALE, which gives all present holders a lot of confidence.</p> <p>In parallel, each week, Scale.Farm allocates 1% of all emissions towards the Classic Liquidity pool, which currently stands at <code class="language-plaintext highlighter-rouge">$</code>16,000 (<code class="language-plaintext highlighter-rouge">$</code>8k+<code class="language-plaintext highlighter-rouge">$</code>8k), incentivizing the community to build up the Tradutional Pool2 depth.</p> <h2 id="thin-liquidity--price-impacts">“Thin” Liquidity &amp; Price Impacts</h2> <p>As of today, as price of SCALE floats near <code class="language-plaintext highlighter-rouge">$</code>0.05 mark, which is 0.000_012 ETH, traders would experience significant price impacts for smaller trades, as the “active” liquidty comes only from the Classic pool with <code class="language-plaintext highlighter-rouge">$</code>8k + <code class="language-plaintext highlighter-rouge">$</code>8k. The bulk of the liquidity remains in the CL position at E3, which kicks in only after prices reach <code class="language-plaintext highlighter-rouge">$</code>0.18, that is, 0.000_045 ETH per SCALE.</p> <p>For reference, each <code class="language-plaintext highlighter-rouge">$</code>1 moves price up by 0.025%. That is to say, each <code class="language-plaintext highlighter-rouge">$</code>100 buy moves price up by 2.5%, and each <code class="language-plaintext highlighter-rouge">$</code>1000 will move price up by 25%. This happens till the price moves into the healthy zone above <code class="language-plaintext highlighter-rouge">$</code>0.18, whereafter price impacts &amp; slippage are reduced significantly.</p> <p>As of today, there is roughly a “threshold” of 2 ETH or <code class="language-plaintext highlighter-rouge">$</code>8000, which is the amount of buy pressure needed to move into this low slippage zone. This <code class="language-plaintext highlighter-rouge">$</code>8000 quantizes the <strong>Demand</strong> for SCALE in the market, coupled with the weekly minted emissions, minus the buybacks from the Recycling Wallet.</p> <p>Each week, roughly 35000 SCALE are minted (after the recycling). To be deemed healthy, there needs to be a minimum buy pressure of nearly <code class="language-plaintext highlighter-rouge">$</code>1500-2000 each week at current prices, and anything in excess of that pushes us more closer to the healthy zone, reducing the <code class="language-plaintext highlighter-rouge">$</code>8000 gap at present.</p> <h2 id="i-want-to-buy-but-price-impact-is-so-high">“I want to buy but price impact is so high!”</h2> <p>As explained above, this is by design, and not by accident. Our mission is make SCALE an asset worth holding, something that grows in value over time (instead of decaying as per the norm in crypto!)</p> <p>For that, we need to craft an organic, sustained demand for SCALE. And our setup lets us measure just that, indicating whether the market wants more SCALE or not.</p> <p>So far, the market has indicated a good demand, moving the price from <code class="language-plaintext highlighter-rouge">$</code>0.007 to <code class="language-plaintext highlighter-rouge">$</code>0.05, marking an increase of nearly 7x in 3 months since July. the market to</p> <p>So here’s a list of What you can do to buy SCALE at these excitingly low prices today:</p> <h3 id="1-setup-a-limit-order">1. Setup a Limit order</h3> <p>Our partners OpenOcean, Odos &amp; 1inch provide Limit Orders for buying SCALE with your preferred assets. We suggest you create orders to buy SCALE at the prices you prefer. Your assets (like eth or usdc) that you want to buy SCALE with will stay in your own wallet till the orders are filled, and you can attach an expiry date/refresh your orders. Its a good passive way to buy here without slippage</p> <h3 id="2-market-buy-from-sellers">2. Market Buy from sellers</h3> <p>See a red candle on the chart? Reverse it to secure your entry. Such opportunities are a great way to transfer SCALE from non-believers to those who believe in our long-term vision.</p> <h3 id="3-just-ape-in">3. Just ape in!</h3> <p>Last option is to just yolo in. You know it takes only 2 ETH to 4x the price from here. Keep in mind that when buying with <code class="language-plaintext highlighter-rouge">$</code>100 here, you will see that you are losing -1.25% of value. But once your buy goes through, You will be the literal force that moves the price by 2.5%. After your market buy, the tokens you hold will be worth +2.5% more!</p> <p>On the Aggregate, <code class="language-plaintext highlighter-rouge">$</code>8000 of buys would appear to be buying <code class="language-plaintext highlighter-rouge">$</code>4000 of SCALE in the trading apps, but once that order goes through, the SCALE you bought for <code class="language-plaintext highlighter-rouge">$</code>8000 would be worth <code class="language-plaintext highlighter-rouge">$</code>16000 as price moves up 4x from your buy-in!</p> <h2 id="end-game">End game.</h2> <p>The long-term plan for SCALE is to “paint” a chart that looks organic, has no clear “top”, and although bobbing up and down, it overall keeps climbing up and up only, similar to how mature charts like the S&amp;P500 look.</p> <p>The idea is to manifest a project, that is so sound that the emissions it prints are a force that bring more “permanent value” to the project, instead of fleeting cycles of rewards that people forget, leaving the project high early on, but dry later on.</p> <p>A great parallel is the mother of Scale, EQUAL. It has paid upwards of <code class="language-plaintext highlighter-rouge">$</code>12 Million to its holders so far, yet today, it has hardly a <code class="language-plaintext highlighter-rouge">$</code>2 Million in Fully Diluted Valuation.</p> <p>Learning from our experiences, knowing what went wrong, and what could have been done better at a “fundamental” level to avert such situations in the future of SCALE. It draws heavily from our designs at TRENCHES &amp; beyond.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="scale"/><category term="liquidity"/><summary type="html"><![CDATA[How we reshaped the Liquidity for SCALE token]]></summary></entry><entry><title type="html">SCALE Emissions</title><link href="https://alshedivat.github.io/news/blog/2025/emissions/" rel="alternate" type="text/html" title="SCALE Emissions"/><published>2025-09-21T13:37:00+00:00</published><updated>2025-09-21T13:37:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2025/emissions</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2025/emissions/"><![CDATA[<p>gmgm</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div&gt;
	&lt;div class="echarts"&gt;
    	&lt;div id="echart-1" class="echart" style="height:70vh"&gt;&lt;/div&gt;
    	&lt;div id="echart-2" class="echart" style="height:70vh"&gt;&lt;/div&gt;
    	&lt;div id="echart-3" class="echart" style="height:70vh"&gt;&lt;/div&gt;
    &lt;/div&gt;

		&lt;script src="https://ftm.guru/ethers-5.2.umd.min.js" type="application/javascript"&gt;&lt;/script&gt;
	    &lt;script src="https://cdn.jsdelivr.net/npm/echarts@5.5.1/dist/echarts.min.js"&gt;&lt;/script&gt;
	    &lt;script&gt;
</code></pre></div></div> <p>eo0 = { toolbox: { feature: { dataView: { show: true, readOnly: false }, magicType: { show: true, type: [‘line’, ‘bar’] }, restore: { show: true }, saveAsImage: { show: true }, }, }, tooltip: { trigger: ‘axis’, axisPointer: { type: ‘cross’, label: { backgroundColor: ‘#6a7985’ } } }, legend: { type: ‘scroll’ , top: 30}, xAxis: {type:’time’}, yAxis: [{type:’value’},{type:’value’}], }</p> <p>async function main() { /* //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// // old emi chart elapsedIndex= 2 rd = (new Array(6)).fill(0); rd = rd.map((e,i)=&gt;1758153600e3 + 7<em>86400e3</em>i) // time, elapsed, upcoming, usd elapsed, usd potential rd = rd.map((e,i)=&gt;([e, (i&lt;elapsedIndex?200:0), (i&lt;elapsedIndex?0:200), (i&lt;elapsedIndex ? 200<em>0.05</em>(1+(Math.random()-0.5)/2 ) : 0)])) rd = rd.map((e,i,a)=&gt;[…e, (i&gt;=elapsedIndex?a[elapsedIndex-1][3]:0)]) // usd potential</p> <p>eo_tvl_the = { …eo0 , title: {left: ‘center’, top: 10, text: “Reward Rates: History &amp; Projection”}, series: [ { name: ‘SCALE per Day (elapsed)’, type: ‘bar’, smooth: true, emphasis: { focus: ‘series’ }, data: rd.map(i=&gt;([i[0],i[1]])), stack: “in SCALE”, itemStyle:{color:’#fddd60’,opacity:1} }, { name: ‘USD per Day (elapsed)’, type: ‘bar’, smooth: true, emphasis: { focus: ‘series’ }, data: rd.map(i=&gt;([i[0],i[3]])), stack: “in USD”, yAxisIndex: 1, itemStyle:{color:’#4992ff’,opacity:1} }, { name: ‘SCALE per Day (assured)’, type: ‘bar’, smooth: true, emphasis: { focus: ‘series’ }, data: rd.map(i=&gt;([i[0],i[2]])), stack: “in SCALE”, itemStyle:{color:’#fddd60’,opacity:1} }, { name: ‘USD per Day (potential)’, type: ‘bar’, smooth: true, emphasis: { focus: ‘series’ }, data: rd.map(i=&gt;([i[0],i[4]])), stack: “in USD”, yAxisIndex: 1, itemStyle:{color:’#4992ff’,opacity:0.5} }, ] } echart1 = echarts.init(document.getElementById(‘echart-1’),’dark’); echart1.setOption(eo_tvl_the); */</p> <p>//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// /* // scale revenues dl_fees = (await (await fetch(“https://api.llama.fi/summary/fees/scale?dataType=dailyFees”)).json()).totalDataChart; console.log(dl_fees); dl_revn = (await (await fetch(“https://api.llama.fi/summary/fees/scale?dataType=dailyRevenue”)).json()).totalDataChart; dl_brib = (await (await fetch(“https://api.llama.fi/summary/fees/scale?dataType=dailyBribesRevenue”)).json()).totalDataChart;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eo_frb = {
  		...eo0 ,
  		title: {left: 'center', top: 10, text: "Historical Fees, Revenue, Bribes"},
  		series: [
		{
  			name: 'Fees from Classic pools',
  			type: 'bar',
  			//smooth: true,
  			emphasis: { focus: 'series' },
  			data: dl_fees.map(i=&gt;( [i[0]*1e3 , i[1]] )),
		},
		{
  			name: 'Revenue from Classic pools',
  			type: 'bar',
  			//smooth: true,
  			emphasis: { focus: 'series' },
  			data: dl_revn.map(i=&gt;( [i[0]*1e3 , i[1]] )),
  			stack: 'All Revenue',
		},
		{
  			name: 'Revenue from non-Classic Pools &amp; all Bribes',
  			type: 'bar',
  			//smooth: true,
  			emphasis: { focus: 'series' },
  			data: dl_brib.map(i=&gt;( [i[0]*1e3 , i[1]] )),
  			stack: 'All Revenue',
		},
		{
  			name: 'All Revenue',
  			type: 'line',
  			//smooth: true,
  			emphasis: { focus: 'series' },
  			data: dl_brib.map(i=&gt;( [i[0]*1e3 , i[1]] )),
  			//stack: 'All Revenue',
		},
  		],
  		dataZoom: [
		{
  			type: 'slider',
  			show: true,
  			xAxisIndex: [0],
  			start: Math.max(dl_fees.length, dl_revn.length, dl_brib.length) - 15 ,
  			end: Math.max(dl_fees.length, dl_revn.length, dl_brib.length)
		},
		{
  			type: 'inside',
  			xAxisIndex: [0],
		},
		{
  			type: 'inside',
  			yAxisIndex: [0],
		}
  		],
  		legend: {
		...eo0.legend,
		show:true,
		selected:{
  			'Fees from Classic pools': false,
  			'Revenue from Classic pools',
  			'Revenue from non-Classic Pools &amp; all Bribes',
		}
  		}
}

echart1 = echarts.init(document.getElementById('echart-1'),'dark'); echart1.setOption(eo_frb); */ //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// // emissions chart
ehd = (
	await (
		(new ethers.Contract(
			"0x73E01Ae0F263ac26F40558c51Cb57137944b3937",
			["function fullEmissionsHistory() external view returns(uint[5][] memory)"],
			(new ethers.providers.JsonRpcProvider("https://mainnet.base.org"))
		))
		.fullEmissionsHistory()
	)
)
.map( (i,iid) =&gt; [
	Number(i[0]), //id	0
	Number(i[1])*1e3, //ts	1
	Number(i[2])/1e18, //m	2
	Number(i[3])/1e18, //d	3
	Number(i[4])/1e18, //p	4
	Number(i[3])/1e18 * 0.02, //team	5
	Number(i[3])/1e18 * 0.01, //pool2	6
	Number(i[3])*1.03/1e18 - Number(i[2])/1e18, //recylced	7
	Number(i[2])/1e18 * Number(i[4])/1e18, //usd_m	8
	Number(i[3])/1e18 * Number(i[4])/1e18, //usd_d	9
	Number(i[3])/1e18 * 0.02 * Number(i[4])/1e18, //usd_team	10
	Number(i[3])/1e18 * 0.01 * Number(i[4])/1e18, //usd_pool2	11
	( Number(i[3])*1.03/1e18 - Number(i[2])/1e18 ) * Number(i[4])/1e18, //usd_recylced	12
	0, //totalSupply = totalMinted	13
	0, //usd_totalMinted	14
	0, //FDV = totalSupply x price	15
	0, //recycled	16
	0, //usd_recycled	17
] )
.map( e =&gt; { // manually adjust team emission changes (should fall into bpg ideally, as these extra were lp bribed to farmers to compensate reverese rebase)
	if(e[1]==1695859200*1e3) { // ep 0 - GENESIS
		// all zeros by default
		e[2] = 10e6; // genesis mint
		//3.6m airdrop, 4.9m eco nft, 0.5m treasury, 1m liquidity @ $0.019 @ $1641/ETH @ 11.614 ETH + 1m SCALE
		e[3] = 3.6e6; //dist = airdrop
		e[4] = 0.019; //price
		e[5] = 4.9e6+ 0.5e6;//team
		e[6] = 1e6;//pool2
		e[7] = 0;//recylced
		e[8] = e[2] * e[4];//usd_mints
		e[9] = e[3] * e[4];//usd_dists
		e[10] = e[5]* e[4];//usd_team
		e[11] = e[6]* e[4];//usd_pool2
		e[12] = e[7]* e[4];//usd_recycled
	}
	if(e[1]==1703116800*1e3) { // ep 12
		e[5] = e[3] * 0.543; //team
		e[10] = e[9] * 0.543; //usd_team
		e[7] = e[3]+e[5]+e[6] - e[2] //recycled
		e[12] = e[9]+e[10]+e[11] - e[8] //usd_recycled
	}
	if(e[1]==1703721600*1e3) { // ep 12
		e[5] = e[3] * 0.115; //team
		e[10] = e[9] * 0.115; //usd_team
		e[7] = e[3]+e[5]+e[6] - e[2] //recycled
		e[12] = e[9]+e[10]+e[11] - e[8] //usd_recycled
	}
	return e;
});
ehd.reverse();
ehd = ehd.map( (e,i,a) =&gt; {
	e[13] = ( i == 0 ? e[2] : e[2] + a[i-1][13] );	//totalSupply = totalMinted	13
	e[14] = ( i == 0 ? e[8] : e[8] + a[i-1][14] );	//usd_totalMinted	14
	e[15] = ( e[13] * e[2] ); //FDV = totalSupply x price	15
	e[16] = ( i == 0 ? e[7] : e[7] + a[i-1][16] );	//recycled	16
	e[17] = ( i == 0 ? e[12] : e[12] + a[i-1][17] );	//usd_recycled	17
	return e;
})
//.map( j =&gt;
// 	j.map( (e,i) =&gt; {
//		if(i&gt;1&amp;&amp;i!=4) { return e.toFixed(); }
//		else { return e; }
//	})
//);



eo_eh = {
  		...eo0 ,
  		title: {left: 'center', top: 10, text: "Historical Emissions (in Tokens)"},
  		series: [
		{
  			name: 'Freshly Minted',
  			type: 'bar',
  			stack: 'Distributions',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[2].toFixed()] )),
		},
		{
  			name: 'Recycled',
  			type: 'bar',
  			stack: 'Distributions',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[7].toFixed()] )),
		},
		{
  			name: 'To Team',
  			type: 'bar',
  			stack: 'Distributions',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[5].toFixed()] )),
		},
		{
  			name: 'For Pool2',
  			type: 'bar',
  			stack: 'Distributions',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[6].toFixed()] )),
		},
		{
  			name: 'Total Supply',
  			type: 'line',
  			yAxisIndex: 1,
  			stack: 'Supplies',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[13].toFixed()] )),
		},
		{
  			name: 'Total Recycled',
  			type: 'line',
  			yAxisIndex: 1,
  			stack: 'Supplies',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[16].toFixed()] )),
		},
		{
  			name: 'Total Distributions',
  			type: 'scatter',
  			yAxisIndex: 1,
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , (i[13]+i[16]).toFixed() ] )),
		},
  		],
  		dataZoom: [
		{
  			type: 'slider',
  			show: true,
  			xAxisIndex: [0],
  			start: ehd.length - 10,
  			end: ehd.length
		},
		{
  			type: 'inside',
  			xAxisIndex: [0],
		},
  		],
  		legend: {
		...eo0.legend,
		show:true,
  		}
}
echart1 = echarts.init(document.getElementById('echart-1'),'dark'); echart1.setOption(eo_eh);




eo_ehu = {
  		...eo0 ,
  		title: {left: 'center', top: 10, text: "Historical Emissions (in USD)"},
  		series: [
		{
  			name: 'Freshly Minted',
  			type: 'bar',
  			stack: 'Total Distribution',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[8].toFixed()] )),
		},
		{
  			name: 'Recycled',
  			type: 'bar',
  			stack: 'Total Distribution',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[12].toFixed()] )),
		},
		{
  			name: 'To Team',
  			type: 'bar',
  			stack: 'Total Distribution',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[10].toFixed()] )),
		},
		{
  			name: 'For Pool2',
  			type: 'bar',
  			stack: 'Total Distribution',
  			emphasis: { focus: 'series' },
  			data: ehd.map(i=&gt;( [i[1] , i[11].toFixed()] )),
		},
  		],
  		dataZoom: [
		{
  			type: 'slider',
  			show: true,
  			xAxisIndex: [0],
  			start: ehd.length - 10,
  			end: ehd.length
		},
		{
  			type: 'inside',
  			xAxisIndex: [0],
		},
  		],
  		legend: {
		...eo0.legend,
		show:true,
  		}
}



echart2 = echarts.init(document.getElementById('echart-2'),'dark'); echart2.setOption(eo_ehu);
</code></pre></div></div> <p>}</p> <p>main() &lt;/script&gt;</p> <p>&lt;/div&gt;</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="sample-posts-2"/><category term="scale"/><category term="liquidity"/><summary type="html"><![CDATA[SCALE Emissions]]></summary></entry><entry><title type="html">Introducing, Scale.Farm</title><link href="https://alshedivat.github.io/news/blog/2025/scale-farm-relaunch/" rel="alternate" type="text/html" title="Introducing, Scale.Farm"/><published>2025-08-30T00:00:00+00:00</published><updated>2025-08-30T00:00:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2025/scale-farm-relaunch</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2025/scale-farm-relaunch/"><![CDATA[<h1 id="news-from-the-frontline">NEWS from the frontline!</h1> <p>“Deep in the trenches” by TRENCHES.Fund</p> <p>Trenches.Fund has wholly acquired Scale™ in a mutually beneficial deal with Equalizer, structured in a way that lets Equalizer team focus on Sonic, dedicating towards MEGA: Make Equalizer Great Again, while we craft a better future for every SCALE holder in the trenches!</p> <p>As part of the takeover process, the new Scale treasury has received $30,000 in USDC along with all the SCALE, veSCALE &amp; SCALE LP from Equalizer’s Treasury, as well as complete ownership to all the code, infra &amp; other related hard &amp; soft assets such as socials, other accounts, etc. and everything else.</p> <p>Equalizer on Sonic will get read access to all the updates (we’ve already been working on closely) made to the existing Equalizer v5 frontend codebase, including the Manual CL UI, from the new Scale Team, until Scale migrates to a newer app. The ownership of all the remaining USDC, ETH &amp; OP, including grants from Optimism Foundation, held by the previous Equalizer Treasury on Base shall remain with Equalizer Treasury. This ensures ample cash reserves to help fund future needs of Equalizer Team on Sonic.</p> <p>All-in-all, this new arrangement will make Equalizer much stronger than before, freeing up resources from maintaining presence on Base to channel all efforts on gaining back its market share on Sonic.</p> <p>We want to say a special Thank You to Hoops and the Equalizer team for the guidance &amp; making this deal possible.</p> <p>A long-list of changes has been lined up for improving Scale’s financial model, aimed towards sustainable long-term value preservation, especially as we enter the Tail Emissions phase at the onset of our 3rd Year in the coming weeks.</p> <p>Exciting times &amp; more alpha ahead!</p> <p>visit Scale Farm here <a href="https://scale.farm">click this</a></p> <p><img src="https://scale.farm/scale/scale-police-banner.png" alt=""/></p>]]></content><author><name></name></author><category term="news"/><summary type="html"><![CDATA[A new era begins ― Trenches.Fund is launching Scale.Farm]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://alshedivat.github.io/news/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2025/plotly</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://alshedivat.github.io/news/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2024/photo-gallery</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://alshedivat.github.io/news/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://alshedivat.github.io/news/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://alshedivat.github.io/news/blog/2024/tabs</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="b686e49a-c965-427f-9d8f-d71bcd7cde48" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="b686e49a-c965-427f-9d8f-d71bcd7cde48" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="91a72816-ff3c-480a-8319-3a78c38f749d" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="91a72816-ff3c-480a-8319-3a78c38f749d" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="6ba36a1d-494a-4b2d-a0fb-561f93dfcf3a" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="6ba36a1d-494a-4b2d-a0fb-561f93dfcf3a" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://alshedivat.github.io/news/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://alshedivat.github.io/news/blog/2024/typograms</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://alshedivat.github.io/news/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2024/post-citation</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://alshedivat.github.io/news/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://alshedivat.github.io/news/blog/2024/pseudocode</id><content type="html" xml:base="https://alshedivat.github.io/news/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry></feed>